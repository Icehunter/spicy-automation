AWSTemplateFormatVersion: "2010-09-09"

Description: Create a Multi-AZ, multi-subnet VPC infrastructure with
  managed NAT gateways in the public Subnet for each Availability Zone. You can also
  create additional private subnets with dedicated custom network access control lists
  (ACLs). If you deploy the Quick Start in a region that doesn't support NAT gateways,
  NAT instances are deployed instead. **WARNING** This template creates AWS resources.
  You will be billed for the AWS resources used if you create a stack from this template.
  QS(0027)

Parameters:
  OwnerTag:
    Description: Owner tag for meta.
    Type: String
  ProductTag:
    Description: Product tag for for meta.
    Type: String
  ComponentTag:
    Description: Component tag for for meta.
    Type: String
  BuildTag:
    Description: Build tag for for meta.
    Type: String
  AvailabilityZones:
    Description:
      "List of Availability Zones to use for the subnets in the VPC. Note:
      The logical order is preserved."
    Type: List<AWS::EC2::AvailabilityZone::Name>
  CreateAdditionalPrivateSubnets:
    AllowedValues:
      - "true"
      - "false"
    Default: "true"
    Description:
      Set to true to create a network ACL protected subnet in each Availability
      Zone. If false, the CIDR parameters for those subnets will be ignored. If true,
      it also requires that the 'Create private subnets' parameter is also true to
      have any effect.
    Type: String
  CreatePrivateSubnets:
    AllowedValues:
      - "true"
      - "false"
    Default: "true"
    Description:
      Set to false to create only public Subnets. If false, the CIDR parameters
      for ALL private subnets will be ignored.
    Type: String
  NumberOfAZs:
    AllowedValues:
      - "2"
      - "3"
      - "4"
    Default: "4"
    Description:
      Number of Availability Zones to use in the VPC. This must match your
      selections in the list of Availability Zones parameter.
    Type: String
  PrivateSubnetA1CIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 172.1.0.0/19
    Description: CIDR block for Private Subnet A1 located in Availability Zone 1
    Type: String
  PrivateSubnetA2CIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 172.1.192.0/21
    Description:
      CIDR block for Private Subnet A2 with dedicated network ACL located
      in Availability Zone 1
    Type: String
  PrivateSubnetB1CIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 172.1.32.0/19
    Description: CIDR block for Private Subnet B1 located in Availability Zone 2
    Type: String
  PrivateSubnetB2CIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 172.1.200.0/21
    Description:
      CIDR block for Private Subnet B2 with dedicated network ACL located
      in Availability Zone 2
    Type: String
  PrivateSubnetC1CIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 172.1.64.0/19
    Description: CIDR block for Private Subnet C1 located in Availability Zone 3
    Type: String
  PrivateSubnetC2CIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 172.1.208.0/21
    Description:
      CIDR block for Private Subnet C2 with dedicated network ACL located
      in Availability Zone 3
    Type: String
  PrivateSubnetD1CIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 172.1.96.0/19
    Description: CIDR block for Private Subnet D1 located in Availability Zone 4
    Type: String
  PrivateSubnetD2CIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 172.1.216.0/21
    Description:
      CIDR block for Private Subnet D2 with dedicated network ACL located
      in Availability Zone 4
    Type: String
  PrivateSubnetATag:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription:
      tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: Network=Private
    Description: tag to add to private subnets A, in format Key=Value (Optional)
    Type: String
  PrivateSubnetBTag:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription:
      tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: Network=Private
    Description: tag to add to private subnets B, in format Key=Value (Optional)
    Type: String
  PublicSubnetACIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 172.1.128.0/20
    Description: CIDR block for the public DMZ subnet 1 located in Availability Zone A
    Type: String
  PublicSubnetBCIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 172.1.144.0/20
    Description: CIDR block for the public DMZ subnet 2 located in Availability Zone B
    Type: String
  PublicSubnetCCIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 172.1.160.0/20
    Description: CIDR block for the public DMZ subnet 3 located in Availability Zone C
    Type: String
  PublicSubnetDCIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 172.1.176.0/20
    Description: CIDR block for the public DMZ subnet 4 located in Availability Zone D
    Type: String
  PublicSubnetTag:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription:
      tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: Network=Public
    Description: tag to add to public Subnets, in format Key=Value (Optional)
    Type: String
  VPCCIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 172.1.0.0/16
    Description: CIDR block for the VPC
    Type: String
  VPCTenancy:
    AllowedValues:
      - default
      - dedicated
    Default: default
    Description: The allowed tenancy of instances launched into the VPC
    Type: String
Conditions:
  3AZCondition:
    Fn::Or:
      - Fn::Equals:
          - Ref: NumberOfAZs
          - "3"
      - Condition: 4AZCondition
  4AZCondition:
    Fn::Equals:
      - Ref: NumberOfAZs
      - "4"
  AdditionalPrivateSubnetsCondition:
    Fn::And:
      - Fn::Equals:
          - Ref: CreatePrivateSubnets
          - "true"
      - Fn::Equals:
          - Ref: CreateAdditionalPrivateSubnets
          - "true"
  AdditionalPrivateSubnets&3AZCondition:
    Fn::And:
      - Condition: AdditionalPrivateSubnetsCondition
      - Condition: 3AZCondition
  AdditionalPrivateSubnets&4AZCondition:
    Fn::And:
      - Condition: AdditionalPrivateSubnetsCondition
      - Condition: 4AZCondition
  NVirginiaRegionCondition:
    Fn::Equals:
      - Ref: AWS::Region
      - us-east-1
  PrivateSubnetsCondition:
    Fn::Equals:
      - Ref: CreatePrivateSubnets
      - "true"
  PrivateSubnets&3AZCondition:
    Fn::And:
      - Condition: PrivateSubnetsCondition
      - Condition: 3AZCondition
  PrivateSubnets&4AZCondition:
    Fn::And:
      - Condition: PrivateSubnetsCondition
      - Condition: 4AZCondition
  PrivateSubnetATagCondition:
    Fn::Not:
      - Fn::Equals:
          - Ref: PrivateSubnetATag
          - ""
  PrivateSubnetBTagCondition:
    Fn::Not:
      - Fn::Equals:
          - Ref: PrivateSubnetBTag
          - ""
  PublicSubnetTagCondition:
    Fn::Not:
      - Fn::Equals:
          - Ref: PublicSubnetTag
          - ""
Resources:
  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName:
        Fn::If:
          - NVirginiaRegionCondition
          - ec2.internal
          - Fn::Sub: "${AWS::Region}.compute.internal"
      DomainNameServers:
        - AmazonProvidedDNS
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VPCCIDR
      InstanceTenancy:
        Ref: VPCTenancy
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value:
            Ref: AWS::StackName
        - Key: Owner
          Value:
            Ref: OwnerTag
        - Key: Product
          Value:
            Ref: ProductTag
        - Key: Component
          Value:
            Ref: ComponentTag
        - Key: Build
          Value:
            Ref: BuildTag
  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId:
        Ref: VPC
      DhcpOptionsId:
        Ref: DHCPOptions
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value:
            Ref: AWS::StackName
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  PrivateSubnetA1:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivateSubnetA1CIDR
      AvailabilityZone:
        Fn::Select:
          - "0"
          - Ref: AvailabilityZones
      Tags:
        - Key: Name
          Value: Private Subnet A1
        - Fn::If:
            - PrivateSubnetATagCondition
            - Key:
                Fn::Select:
                  - "0"
                  - Fn::Split:
                      - "="
                      - Ref: PrivateSubnetATag
              Value:
                Fn::Select:
                  - "1"
                  - Fn::Split:
                      - "="
                      - Ref: PrivateSubnetATag
            - Ref: AWS::NoValue
  PrivateSubnetA2:
    Condition: AdditionalPrivateSubnetsCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivateSubnetA2CIDR
      AvailabilityZone:
        Fn::Select:
          - "0"
          - Ref: AvailabilityZones
      Tags:
        - Key: Name
          Value: Private Subnet A2
        - Fn::If:
            - PrivateSubnetBTagCondition
            - Key:
                Fn::Select:
                  - "0"
                  - Fn::Split:
                      - "="
                      - Ref: PrivateSubnetBTag
              Value:
                Fn::Select:
                  - "1"
                  - Fn::Split:
                      - "="
                      - Ref: PrivateSubnetBTag
            - Ref: AWS::NoValue
  PrivateSubnetB1:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivateSubnetB1CIDR
      AvailabilityZone:
        Fn::Select:
          - "1"
          - Ref: AvailabilityZones
      Tags:
        - Key: Name
          Value: Private Subnet B1
        - Fn::If:
            - PrivateSubnetATagCondition
            - Key:
                Fn::Select:
                  - "0"
                  - Fn::Split:
                      - "="
                      - Ref: PrivateSubnetATag
              Value:
                Fn::Select:
                  - "1"
                  - Fn::Split:
                      - "="
                      - Ref: PrivateSubnetATag
            - Ref: AWS::NoValue
  PrivateSubnetB2:
    Condition: AdditionalPrivateSubnetsCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivateSubnetB2CIDR
      AvailabilityZone:
        Fn::Select:
          - "1"
          - Ref: AvailabilityZones
      Tags:
        - Key: Name
          Value: Private Subnet B2
        - Fn::If:
            - PrivateSubnetBTagCondition
            - Key:
                Fn::Select:
                  - "0"
                  - Fn::Split:
                      - "="
                      - Ref: PrivateSubnetBTag
              Value:
                Fn::Select:
                  - "1"
                  - Fn::Split:
                      - "="
                      - Ref: PrivateSubnetBTag
            - Ref: AWS::NoValue
  PrivateSubnetC1:
    Condition: PrivateSubnets&3AZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivateSubnetC1CIDR
      AvailabilityZone:
        Fn::Select:
          - "2"
          - Ref: AvailabilityZones
      Tags:
        - Key: Name
          Value: Private Subnet C1
        - Fn::If:
            - PrivateSubnetATagCondition
            - Key:
                Fn::Select:
                  - "0"
                  - Fn::Split:
                      - "="
                      - Ref: PrivateSubnetATag
              Value:
                Fn::Select:
                  - "1"
                  - Fn::Split:
                      - "="
                      - Ref: PrivateSubnetATag
            - Ref: AWS::NoValue
  PrivateSubnetC2:
    Condition: AdditionalPrivateSubnets&3AZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivateSubnetC2CIDR
      AvailabilityZone:
        Fn::Select:
          - "2"
          - Ref: AvailabilityZones
      Tags:
        - Key: Name
          Value: Private Subnet C2
        - Fn::If:
            - PrivateSubnetBTagCondition
            - Key:
                Fn::Select:
                  - "0"
                  - Fn::Split:
                      - "="
                      - Ref: PrivateSubnetBTag
              Value:
                Fn::Select:
                  - "1"
                  - Fn::Split:
                      - "="
                      - Ref: PrivateSubnetBTag
            - Ref: AWS::NoValue
  PrivateSubnetD1:
    Condition: PrivateSubnets&4AZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivateSubnetD1CIDR
      AvailabilityZone:
        Fn::Select:
          - "3"
          - Ref: AvailabilityZones
      Tags:
        - Key: Name
          Value: Private Subnet D1
        - Fn::If:
            - PrivateSubnetATagCondition
            - Key:
                Fn::Select:
                  - "0"
                  - Fn::Split:
                      - "="
                      - Ref: PrivateSubnetATag
              Value:
                Fn::Select:
                  - "1"
                  - Fn::Split:
                      - "="
                      - Ref: PrivateSubnetATag
            - Ref: AWS::NoValue
  PrivateSubnetD2:
    Condition: AdditionalPrivateSubnets&4AZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivateSubnetD2CIDR
      AvailabilityZone:
        Fn::Select:
          - "3"
          - Ref: AvailabilityZones
      Tags:
        - Key: Name
          Value: Private Subnet D2
        - Fn::If:
            - PrivateSubnetBTagCondition
            - Key:
                Fn::Select:
                  - "0"
                  - Fn::Split:
                      - "="
                      - Ref: PrivateSubnetBTag
              Value:
                Fn::Select:
                  - "1"
                  - Fn::Split:
                      - "="
                      - Ref: PrivateSubnetBTag
            - Ref: AWS::NoValue
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PublicSubnetACIDR
      AvailabilityZone:
        Fn::Select:
          - "0"
          - Ref: AvailabilityZones
      Tags:
        - Key: Name
          Value: Public Subnet A
        - Fn::If:
            - PublicSubnetTagCondition
            - Key:
                Fn::Select:
                  - "0"
                  - Fn::Split:
                      - "="
                      - Ref: PublicSubnetTag
              Value:
                Fn::Select:
                  - "1"
                  - Fn::Split:
                      - "="
                      - Ref: PublicSubnetTag
            - Ref: AWS::NoValue
      MapPublicIpOnLaunch: true
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PublicSubnetBCIDR
      AvailabilityZone:
        Fn::Select:
          - "1"
          - Ref: AvailabilityZones
      Tags:
        - Key: Name
          Value: Public Subnet B
        - Fn::If:
            - PublicSubnetTagCondition
            - Key:
                Fn::Select:
                  - "0"
                  - Fn::Split:
                      - "="
                      - Ref: PublicSubnetTag
              Value:
                Fn::Select:
                  - "1"
                  - Fn::Split:
                      - "="
                      - Ref: PublicSubnetTag
            - Ref: AWS::NoValue
      MapPublicIpOnLaunch: true
  PublicSubnetC:
    Condition: 3AZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PublicSubnetCCIDR
      AvailabilityZone:
        Fn::Select:
          - "2"
          - Ref: AvailabilityZones
      Tags:
        - Key: Name
          Value: Public Subnet C
        - Fn::If:
            - PublicSubnetTagCondition
            - Key:
                Fn::Select:
                  - "0"
                  - Fn::Split:
                      - "="
                      - Ref: PublicSubnetTag
              Value:
                Fn::Select:
                  - "1"
                  - Fn::Split:
                      - "="
                      - Ref: PublicSubnetTag
            - Ref: AWS::NoValue
      MapPublicIpOnLaunch: true
  PublicSubnetD:
    Condition: 4AZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PublicSubnetDCIDR
      AvailabilityZone:
        Fn::Select:
          - "3"
          - Ref: AvailabilityZones
      Tags:
        - Key: Name
          Value: Public Subnet D
        - Fn::If:
            - PublicSubnetTagCondition
            - Key:
                Fn::Select:
                  - "0"
                  - Fn::Split:
                      - "="
                      - Ref: PublicSubnetTag
              Value:
                Fn::Select:
                  - "1"
                  - Fn::Split:
                      - "="
                      - Ref: PublicSubnetTag
            - Ref: AWS::NoValue
      MapPublicIpOnLaunch: true
  PrivateSubnetA1RouteTable:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: Private Subnet A1
        - Key: Network
          Value: Private
  PrivateSubnetA1Route:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateSubnetA1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGatewayZoneA
  PrivateSubnetA1RouteTableAssociation:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetA1
      RouteTableId:
        Ref: PrivateSubnetA1RouteTable
  PrivateSubnetB1RouteTable:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: Private Subnet B1
        - Key: Network
          Value: Private
  PrivateSubnetB1Route:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateSubnetB1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGatewayZoneB
  PrivateSubnetB1RouteTableAssociation:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetB1
      RouteTableId:
        Ref: PrivateSubnetB1RouteTable
  PrivateSubnetC1RouteTable:
    Condition: PrivateSubnets&3AZCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: Private Subnet C1
        - Key: Network
          Value: Private
  PrivateSubnetC1Route:
    Condition: PrivateSubnets&3AZCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateSubnetC1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGatewayZoneC
  PrivateSubnetC1RouteTableAssociation:
    Condition: PrivateSubnets&3AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetC1
      RouteTableId:
        Ref: PrivateSubnetC1RouteTable
  PrivateSubnetD1RouteTable:
    Condition: PrivateSubnets&4AZCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: Private Subnet D1
        - Key: Network
          Value: Private
  PrivateSubnetD1Route:
    Condition: PrivateSubnets&4AZCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateSubnetD1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGatewayZoneD
  PrivateSubnetD1RouteTableAssociation:
    Condition: PrivateSubnets&4AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetD1
      RouteTableId:
        Ref: PrivateSubnetD1RouteTable
  PrivateSubnetA2RouteTable:
    Condition: AdditionalPrivateSubnetsCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: Private Subnet A2
        - Key: Network
          Value: Private
  PrivateSubnetA2Route:
    Condition: AdditionalPrivateSubnetsCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateSubnetA2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGatewayZoneA
  PrivateSubnetA2RouteTableAssociation:
    Condition: AdditionalPrivateSubnetsCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetA2
      RouteTableId:
        Ref: PrivateSubnetA2RouteTable
  PrivateSubnetA2NetworkACL:
    Condition: AdditionalPrivateSubnetsCondition
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: NACL Protected subnet A
        - Key: Network
          Value: NACL Protected
  PrivateSubnetA2NetworkACLEntryInbound:
    Condition: AdditionalPrivateSubnetsCondition
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId:
        Ref: PrivateSubnetA2NetworkACL
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
  PrivateSubnetA2NetworkACLEntryOutbound:
    Condition: AdditionalPrivateSubnetsCondition
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: PrivateSubnetA2NetworkACL
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
  PrivateSubnetA2NetworkACKAssociation:
    Condition: AdditionalPrivateSubnetsCondition
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetA2
      NetworkAclId:
        Ref: PrivateSubnetA2NetworkACL
  PrivateSubnetB2RouteTable:
    Condition: AdditionalPrivateSubnetsCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: Private Subnet B2
        - Key: Network
          Value: Private
  PrivateSubnetB2Route:
    Condition: AdditionalPrivateSubnetsCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateSubnetB2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGatewayZoneB
  PrivateSubnetB2RouteTableAssociation:
    Condition: AdditionalPrivateSubnetsCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetB2
      RouteTableId:
        Ref: PrivateSubnetB2RouteTable
  PrivateSubnetB2NetworkACL:
    Condition: AdditionalPrivateSubnetsCondition
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: NACL Protected subnet B
        - Key: Network
          Value: NACL Protected
  PrivateSubnetB2NetworkACLEntryInbound:
    Condition: AdditionalPrivateSubnetsCondition
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId:
        Ref: PrivateSubnetB2NetworkACL
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
  PrivateSubnetB2NetworkACLEntryOutbound:
    Condition: AdditionalPrivateSubnetsCondition
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: PrivateSubnetB2NetworkACL
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
  PrivateSubnetB2NetworkACKAssociation:
    Condition: AdditionalPrivateSubnetsCondition
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetB2
      NetworkAclId:
        Ref: PrivateSubnetB2NetworkACL
  PrivateSubnetC2RouteTable:
    Condition: AdditionalPrivateSubnets&3AZCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: Private Subnet C2
        - Key: Network
          Value: Private
  PrivateSubnetC2Route:
    Condition: AdditionalPrivateSubnets&3AZCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateSubnetC2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGatewayZoneC
  PrivateSubnetC2RouteTableAssociation:
    Condition: AdditionalPrivateSubnets&3AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetC2
      RouteTableId:
        Ref: PrivateSubnetC2RouteTable
  PrivateSubnetC2NetworkACL:
    Condition: AdditionalPrivateSubnets&3AZCondition
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: NACL Protected subnet C
        - Key: Network
          Value: NACL Protected
  PrivateSubnetC2NetworkACLEntryInbound:
    Condition: AdditionalPrivateSubnets&3AZCondition
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId:
        Ref: PrivateSubnetC2NetworkACL
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
  PrivateSubnetC2NetworkACLEntryOutbound:
    Condition: AdditionalPrivateSubnets&3AZCondition
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: PrivateSubnetC2NetworkACL
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
  PrivateSubnetC2NetworkACKAssociation:
    Condition: AdditionalPrivateSubnets&3AZCondition
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetC2
      NetworkAclId:
        Ref: PrivateSubnetC2NetworkACL
  PrivateSubnetD2RouteTable:
    Condition: AdditionalPrivateSubnets&4AZCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: Private Subnet D2
        - Key: Network
          Value: Private
  PrivateSubnetD2Route:
    Condition: AdditionalPrivateSubnets&4AZCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateSubnetD2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGatewayZoneD
  PrivateSubnetD2RouteTableAssociation:
    Condition: AdditionalPrivateSubnets&4AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetD2
      RouteTableId:
        Ref: PrivateSubnetD2RouteTable
  PrivateSubnetD2NetworkACL:
    Condition: AdditionalPrivateSubnets&4AZCondition
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: NACL Protected subnet D
        - Key: Network
          Value: NACL Protected
  PrivateSubnetD2NetworkACLEntryInbound:
    Condition: AdditionalPrivateSubnets&4AZCondition
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId:
        Ref: PrivateSubnetD2NetworkACL
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
  PrivateSubnetD2NetworkACLEntryOutbound:
    Condition: AdditionalPrivateSubnets&4AZCondition
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: PrivateSubnetD2NetworkACL
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
  PrivateSubnetD2NetworkACKAssociation:
    Condition: AdditionalPrivateSubnets&4AZCondition
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetD2
      NetworkAclId:
        Ref: PrivateSubnetD2NetworkACL
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: Public Subnets
        - Key: Network
          Value: Public
  PublicSubnetRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetA
      RouteTableId:
        Ref: PublicSubnetRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetB
      RouteTableId:
        Ref: PublicSubnetRouteTable
  PublicSubnetCRouteTableAssociation:
    Condition: 3AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetC
      RouteTableId:
        Ref: PublicSubnetRouteTable
  PublicSubnetDRouteTableAssociation:
    Condition: 4AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetD
      RouteTableId:
        Ref: PublicSubnetRouteTable
  NATZoneAEIP:
    Condition: PrivateSubnetsCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATZoneBEIP:
    Condition: PrivateSubnetsCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATZoneCEIP:
    Condition: PrivateSubnets&3AZCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATZoneDEIP:
    Condition: PrivateSubnets&4AZCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATGatewayZoneA:
    Condition: PrivateSubnetsCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NATZoneAEIP
          - AllocationId
      SubnetId:
        Ref: PublicSubnetA
  NATGatewayZoneB:
    Condition: PrivateSubnetsCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NATZoneBEIP
          - AllocationId
      SubnetId:
        Ref: PublicSubnetB
  NATGatewayZoneC:
    Condition: PrivateSubnets&3AZCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NATZoneCEIP
          - AllocationId
      SubnetId:
        Ref: PublicSubnetC
  NATGatewayZoneD:
    Condition: PrivateSubnets&4AZCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NATZoneDEIP
          - AllocationId
      SubnetId:
        Ref: PublicSubnetD
  S3VPCEndpoint:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "*"
            Effect: Allow
            Resource: "*"
            Principal: "*"
      RouteTableIds:
        - Ref: PrivateSubnetA1RouteTable
        - Ref: PrivateSubnetB1RouteTable
        - Fn::If:
            - PrivateSubnets&3AZCondition
            - Ref: PrivateSubnetC1RouteTable
            - Ref: AWS::NoValue
        - Fn::If:
            - PrivateSubnets&4AZCondition
            - Ref: PrivateSubnetD1RouteTable
            - Ref: AWS::NoValue
        - Fn::If:
            - AdditionalPrivateSubnetsCondition
            - Ref: PrivateSubnetA2RouteTable
            - Ref: AWS::NoValue
        - Fn::If:
            - AdditionalPrivateSubnetsCondition
            - Ref: PrivateSubnetB2RouteTable
            - Ref: AWS::NoValue
        - Fn::If:
            - AdditionalPrivateSubnets&3AZCondition
            - Ref: PrivateSubnetC2RouteTable
            - Ref: AWS::NoValue
        - Fn::If:
            - AdditionalPrivateSubnets&4AZCondition
            - Ref: PrivateSubnetD2RouteTable
            - Ref: AWS::NoValue
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.s3
      VpcId:
        Ref: VPC
Outputs:
  NATZoneAEIP:
    Condition: PrivateSubnetsCondition
    Description: NAT A IP address
    Value:
      Ref: NATZoneAEIP
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-NATZoneAEIP"
  NATZoneBEIP:
    Condition: PrivateSubnetsCondition
    Description: NAT B IP address
    Value:
      Ref: NATZoneBEIP
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-NATZoneBEIP"
  NATZoneCEIP:
    Condition: PrivateSubnets&3AZCondition
    Description: NAT C IP address
    Value:
      Ref: NATZoneCEIP
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-NATZoneCEIP"
  NATZoneDEIP:
    Condition: PrivateSubnets&4AZCondition
    Description: NAT D IP address
    Value:
      Ref: NATZoneDEIP
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-NATZoneDEIP"
  PrivateSubnetA1CIDR:
    Condition: PrivateSubnetsCondition
    Description: Private Subnet 1 CIDR in Availability Zone A
    Value:
      Ref: PrivateSubnetA1CIDR
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnetA1CIDR"
  PrivateSubnetA1ID:
    Condition: PrivateSubnetsCondition
    Description: Private Subnet 1 ID in Availability Zone A
    Value:
      Ref: PrivateSubnetA1
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnetA1ID"
  PrivateSubnetA2CIDR:
    Condition: AdditionalPrivateSubnetsCondition
    Description: Private Subnet 2 CIDR in Availability Zone A
    Value:
      Ref: PrivateSubnetA2CIDR
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnetA2CIDR"
  PrivateSubnetA2ID:
    Condition: AdditionalPrivateSubnetsCondition
    Description: Private Subnet 2 ID in Availability Zone A
    Value:
      Ref: PrivateSubnetA2
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnetA2ID"
  PrivateSubnetB1CIDR:
    Condition: PrivateSubnetsCondition
    Description: Private Subnet 1 CIDR in Availability Zone B
    Value:
      Ref: PrivateSubnetB1CIDR
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnetB1CIDR"
  PrivateSubnetB1ID:
    Condition: PrivateSubnetsCondition
    Description: Private Subnet 1 ID in Availability Zone B
    Value:
      Ref: PrivateSubnetB1
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnetB1ID"
  PrivateSubnetB2CIDR:
    Condition: AdditionalPrivateSubnetsCondition
    Description: Private Subnet 2 CIDR in Availability Zone B
    Value:
      Ref: PrivateSubnetB2CIDR
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnetB2CIDR"
  PrivateSubnetB2ID:
    Condition: AdditionalPrivateSubnetsCondition
    Description: Private Subnet 2 ID in Availability Zone B
    Value:
      Ref: PrivateSubnetB2
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnetB2ID"
  PrivateSubnetC1CIDR:
    Condition: PrivateSubnets&3AZCondition
    Description: Private Subnet 1 CIDR in Availability Zone C
    Value:
      Ref: PrivateSubnetC1CIDR
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnetC1CIDR"
  PrivateSubnetC1ID:
    Condition: PrivateSubnets&3AZCondition
    Description: Private Subnet 1 ID in Availability Zone C
    Value:
      Ref: PrivateSubnetC1
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnetC1ID"
  PrivateSubnetC2CIDR:
    Condition: AdditionalPrivateSubnets&3AZCondition
    Description: Private Subnet 2 CIDR in Availability Zone C
    Value:
      Ref: PrivateSubnetC2CIDR
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnetC2CIDR"
  PrivateSubnetC2ID:
    Condition: AdditionalPrivateSubnets&3AZCondition
    Description: Private Subnet 2 ID in Availability Zone C
    Value:
      Ref: PrivateSubnetC2
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnetC2ID"
  PrivateSubnetD1CIDR:
    Condition: PrivateSubnets&4AZCondition
    Description: Private Subnet 1 CIDR in Availability Zone D
    Value:
      Ref: PrivateSubnetD1CIDR
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnetD1CIDR"
  PrivateSubnetD1ID:
    Condition: PrivateSubnets&4AZCondition
    Description: Private Subnet 1 ID in Availability Zone D
    Value:
      Ref: PrivateSubnetD1
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnetD1ID"
  PrivateSubnetD2CIDR:
    Condition: AdditionalPrivateSubnets&4AZCondition
    Description: Private Subnet 2 CIDR in Availability Zone D
    Value:
      Ref: PrivateSubnetD2CIDR
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnetD2CIDR"
  PrivateSubnetD2ID:
    Condition: AdditionalPrivateSubnets&4AZCondition
    Description: Private Subnet 2 ID in Availability Zone D
    Value:
      Ref: PrivateSubnetD2
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnetD2ID"
  PublicSubnetACIDR:
    Description: Public Subnet A CIDR in Availability Zone A
    Value:
      Ref: PublicSubnetACIDR
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnetACIDR"
  PublicSubnetAID:
    Description: Public Subnet A ID in Availability Zone A
    Value:
      Ref: PublicSubnetA
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnetAID"
  PublicSubnetBCIDR:
    Description: Public Subnet B CIDR in Availability Zone B
    Value:
      Ref: PublicSubnetBCIDR
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnetBCIDR"
  PublicSubnetBID:
    Description: Public Subnet B ID in Availability Zone B
    Value:
      Ref: PublicSubnetB
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnetBID"
  PublicSubnetCCIDR:
    Condition: 3AZCondition
    Description: Public Subnet C CIDR in Availability Zone C
    Value:
      Ref: PublicSubnetCCIDR
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnetCCIDR"
  PublicSubnetCID:
    Condition: 3AZCondition
    Description: Public Subnet C ID in Availability Zone C
    Value:
      Ref: PublicSubnetC
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnetCID"
  PublicSubnetDCIDR:
    Condition: 4AZCondition
    Description: Public Subnet D CIDR in Availability Zone D
    Value:
      Ref: PublicSubnetDCIDR
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnetDCIDR"
  PublicSubnetDID:
    Condition: 4AZCondition
    Description: Public Subnet D ID in Availability Zone D
    Value:
      Ref: PublicSubnetD
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnetDID"
  S3VPCEndpoint:
    Condition: PrivateSubnetsCondition
    Description: S3 VPC Endpoint
    Value:
      Ref: S3VPCEndpoint
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-S3VPCEndpoint"
  PrivateSubnetA1RouteTable:
    Condition: PrivateSubnetsCondition
    Value:
      Ref: PrivateSubnetA1RouteTable
    Description: Private Subnet A1 route table
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnetA1RouteTable"
  PrivateSubnetA2RouteTable:
    Condition: AdditionalPrivateSubnetsCondition
    Value:
      Ref: PrivateSubnetA2RouteTable
    Description: Private Subnet A2 route table
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnetA2RouteTable"
  PrivateSubnetB1RouteTable:
    Condition: PrivateSubnetsCondition
    Value:
      Ref: PrivateSubnetB1RouteTable
    Description: Private Subnet B1 route table
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnetB1RouteTable"
  PrivateSubnetB2RouteTable:
    Condition: AdditionalPrivateSubnetsCondition
    Value:
      Ref: PrivateSubnetB2RouteTable
    Description: Private Subnet B2 route table
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnetB2RouteTable"
  PrivateSubnetC1RouteTable:
    Condition: PrivateSubnets&3AZCondition
    Value:
      Ref: PrivateSubnetC1RouteTable
    Description: Private Subnet C1 route table
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnetC1RouteTable"
  PrivateSubnetC2RouteTable:
    Condition: AdditionalPrivateSubnets&3AZCondition
    Value:
      Ref: PrivateSubnetC2RouteTable
    Description: Private Subnet C2 route table
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnetC2RouteTable"
  PrivateSubnetD1RouteTable:
    Condition: PrivateSubnets&4AZCondition
    Value:
      Ref: PrivateSubnetD1RouteTable
    Description: Private Subnet D1 route table
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnetD1RouteTable"
  PrivateSubnetD2RouteTable:
    Condition: AdditionalPrivateSubnets&4AZCondition
    Value:
      Ref: PrivateSubnetD2RouteTable
    Description: Private Subnet D2 route table
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnetD2RouteTable"
  PublicSubnetRouteTable:
    Value:
      Ref: PublicSubnetRouteTable
    Description: Public Subnet route table
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnetRouteTable"
  VPCCIDR:
    Value:
      Ref: VPCCIDR
    Description: VPC CIDR
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-VPCCIDR"
  VPCID:
    Value:
      Ref: VPC
    Description: VPC ID
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-VPCID"
